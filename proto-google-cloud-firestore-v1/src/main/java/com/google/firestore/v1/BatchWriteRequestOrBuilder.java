/*
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/firestore/v1/firestore.proto

package com.google.firestore.v1;

public interface BatchWriteRequestOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.firestore.v1.BatchWriteRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * The database name. In the format:
   * `projects/{project_id}/databases/{database_id}`.
   * </pre>
   *
   * <code>string database = 1;</code>
   *
   * @return The database.
   */
  java.lang.String getDatabase();
  /**
   *
   *
   * <pre>
   * The database name. In the format:
   * `projects/{project_id}/databases/{database_id}`.
   * </pre>
   *
   * <code>string database = 1;</code>
   *
   * @return The bytes for database.
   */
  com.google.protobuf.ByteString getDatabaseBytes();

  /**
   *
   *
   * <pre>
   * The writes to apply.
   * The writes are not applied atomically, and can be applied out of order.
   * More than 1 write per document is not allowed.
   * The success status of each write is independent of the other ones (some may
   * fail and some may succeed) and is specified in the BatchWriteResponse.
   * Note that the writes here are not applied atomically but the writes in the
   * Write(stream WriteRequest) are applied atomically and they cannot be
   * batched.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write writes = 2;</code>
   */
  java.util.List<com.google.firestore.v1.Write> getWritesList();
  /**
   *
   *
   * <pre>
   * The writes to apply.
   * The writes are not applied atomically, and can be applied out of order.
   * More than 1 write per document is not allowed.
   * The success status of each write is independent of the other ones (some may
   * fail and some may succeed) and is specified in the BatchWriteResponse.
   * Note that the writes here are not applied atomically but the writes in the
   * Write(stream WriteRequest) are applied atomically and they cannot be
   * batched.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write writes = 2;</code>
   */
  com.google.firestore.v1.Write getWrites(int index);
  /**
   *
   *
   * <pre>
   * The writes to apply.
   * The writes are not applied atomically, and can be applied out of order.
   * More than 1 write per document is not allowed.
   * The success status of each write is independent of the other ones (some may
   * fail and some may succeed) and is specified in the BatchWriteResponse.
   * Note that the writes here are not applied atomically but the writes in the
   * Write(stream WriteRequest) are applied atomically and they cannot be
   * batched.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write writes = 2;</code>
   */
  int getWritesCount();
  /**
   *
   *
   * <pre>
   * The writes to apply.
   * The writes are not applied atomically, and can be applied out of order.
   * More than 1 write per document is not allowed.
   * The success status of each write is independent of the other ones (some may
   * fail and some may succeed) and is specified in the BatchWriteResponse.
   * Note that the writes here are not applied atomically but the writes in the
   * Write(stream WriteRequest) are applied atomically and they cannot be
   * batched.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write writes = 2;</code>
   */
  java.util.List<? extends com.google.firestore.v1.WriteOrBuilder> getWritesOrBuilderList();
  /**
   *
   *
   * <pre>
   * The writes to apply.
   * The writes are not applied atomically, and can be applied out of order.
   * More than 1 write per document is not allowed.
   * The success status of each write is independent of the other ones (some may
   * fail and some may succeed) and is specified in the BatchWriteResponse.
   * Note that the writes here are not applied atomically but the writes in the
   * Write(stream WriteRequest) are applied atomically and they cannot be
   * batched.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write writes = 2;</code>
   */
  com.google.firestore.v1.WriteOrBuilder getWritesOrBuilder(int index);
}

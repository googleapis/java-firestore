/*
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/firestore/v1/pipeline.proto

// Protobuf Java Version: 3.25.2
package com.google.firestore.v1;

public interface StructuredPipelineOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.firestore.v1.StructuredPipeline)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * The pipeline query to execute.
   * </pre>
   *
   * <code>.google.firestore.v1.Pipeline pipeline = 1;</code>
   *
   * @return Whether the pipeline field is set.
   */
  boolean hasPipeline();
  /**
   *
   *
   * <pre>
   * The pipeline query to execute.
   * </pre>
   *
   * <code>.google.firestore.v1.Pipeline pipeline = 1;</code>
   *
   * @return The pipeline.
   */
  com.google.firestore.v1.Pipeline getPipeline();
  /**
   *
   *
   * <pre>
   * The pipeline query to execute.
   * </pre>
   *
   * <code>.google.firestore.v1.Pipeline pipeline = 1;</code>
   */
  com.google.firestore.v1.PipelineOrBuilder getPipelineOrBuilder();

  /**
   *
   *
   * <pre>
   * Optional query-level arguments.
   *
   * (-- Think query statement hints. --)
   *
   * (-- TODO(batchik): define the api contract of using an unsupported hint --)
   * </pre>
   *
   * <code>map&lt;string, .google.firestore.v1.Value&gt; options = 2;</code>
   */
  int getOptionsCount();
  /**
   *
   *
   * <pre>
   * Optional query-level arguments.
   *
   * (-- Think query statement hints. --)
   *
   * (-- TODO(batchik): define the api contract of using an unsupported hint --)
   * </pre>
   *
   * <code>map&lt;string, .google.firestore.v1.Value&gt; options = 2;</code>
   */
  boolean containsOptions(java.lang.String key);
  /** Use {@link #getOptionsMap()} instead. */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.google.firestore.v1.Value> getOptions();
  /**
   *
   *
   * <pre>
   * Optional query-level arguments.
   *
   * (-- Think query statement hints. --)
   *
   * (-- TODO(batchik): define the api contract of using an unsupported hint --)
   * </pre>
   *
   * <code>map&lt;string, .google.firestore.v1.Value&gt; options = 2;</code>
   */
  java.util.Map<java.lang.String, com.google.firestore.v1.Value> getOptionsMap();
  /**
   *
   *
   * <pre>
   * Optional query-level arguments.
   *
   * (-- Think query statement hints. --)
   *
   * (-- TODO(batchik): define the api contract of using an unsupported hint --)
   * </pre>
   *
   * <code>map&lt;string, .google.firestore.v1.Value&gt; options = 2;</code>
   */
  /* nullable */
  com.google.firestore.v1.Value getOptionsOrDefault(
      java.lang.String key,
      /* nullable */
      com.google.firestore.v1.Value defaultValue);
  /**
   *
   *
   * <pre>
   * Optional query-level arguments.
   *
   * (-- Think query statement hints. --)
   *
   * (-- TODO(batchik): define the api contract of using an unsupported hint --)
   * </pre>
   *
   * <code>map&lt;string, .google.firestore.v1.Value&gt; options = 2;</code>
   */
  com.google.firestore.v1.Value getOptionsOrThrow(java.lang.String key);
}
